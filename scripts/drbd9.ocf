#!/bin/bash
#
#
#               OCF Resource Agent compliant drbd9 resource script.
#
# Copyright (c) 2016 Piotr Miedzik,
#     GSI Helmholtzzentrum fÃ¼r Schwerionenforschung GmbH
#
# Copyright (c) 2009 LINBIT HA-Solutions GmbH,
# Copyright (c) 2009 Florian Haas, Lars Ellenberg
# Based on:
#   - Example of a stateful OCF Resource Agent
#   - OCF Resource Agent compliant drbd resource script
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

#: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
#. ${OCF_FUNCTIONS}

DRBD_LIB=/usr/lib/drbd
DRBDMANAGE_DIR=/var/lib/drbdmanage

if test -n "${OCF_FUNCTIONS_DIR}" ; then
	if test -e "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs" ; then
		. "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs"
	elif test -e "${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs" ; then
		. "${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs"
	fi
else
	if test -e "${OCF_ROOT}/lib/heartbeat/ocf-shellfuncs" ; then
		. "${OCF_ROOT}/lib/heartbeat/ocf-shellfuncs"
	elif test -e "${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"; then
		. "${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"
	fi
fi



: ${__OCF_ACTION=$1}
CRM_MASTER="${HA_SBIN_DIR}/crm_master -l reboot"

#######################################################################
# defaults
OCF_RESKEY_drbdconf_default="/etc/drbd.conf"


# The passed in OCF_CRM_meta_notify_* environment
# is not reliably with pacemaker up to at least
# 1.0.10 and 1.1.4. It should be fixed later.
# Until that is fixed, the "self-outdating feature" would base its actions on
# wrong information, and possibly not outdate when it should, or, even worse,
# outdate the last remaining valid copy.
# Disable.
OCF_RESKEY_stop_outdates_secondary_default="false"

  OCF_RESKEY_adjust_master_score_default="5 10 1000 10000"
#   ignored  |  Consistent    |  Unknown -'  |   |     |
#   ignored  |  NOT UpToDate  |  UpToDate ---'   |     |
# Secondary  |  UpToDate      |  unknown --------'     |
#   ignored  |  UpToDate      |  known   --------------+
#   Primary  |  UpToDate      |  ignored --------------'

: ${OCF_RESKEY_drbdconf:=${OCF_RESKEY_drbdconf_default}}
: ${OCF_RESKEY_stop_outdates_secondary:=${OCF_RESKEY_stop_outdates_secondary_default}}
: ${OCF_RESKEY_adjust_master_score:=${OCF_RESKEY_adjust_master_score_default}}

# Defaults according to "Configuration 1.0 Explained",
# "Multi-state resource configuration options"
: ${OCF_RESKEY_CRM_meta_clone_node_max=1}
: ${OCF_RESKEY_CRM_meta_master_max=1}
: ${OCF_RESKEY_CRM_meta_master_node_max=1}
###########################


DEBUG_LOG_DIR=/tmp/drbd.ocf.ra.debug
if [[ -n "${OCF_RESKEY_CRM_meta_id}" ]]; then
DEBUG_LOG=$DEBUG_LOG_DIR/log.${OCF_RESKEY_CRM_meta_id}
else
DEBUG_LOG=$DEBUG_LOG_DIR/log.${OCF_RESOURCE_INSTANCE}
fi

USE_DEBUG_LOG=false

ls_stat_is_dir_0700_root() {
        set -- $(command stat -c "%a" ${1});
        case "$1" in
        700)  true ;;
        *)      false ;;
        esac
}

if [[ -n "${OCF_RESKEY_drbd_debug_level}"  && "${OCF_RESKEY_drbd_debug_level}" -gt 0 ]]; then

	if [[ -d "${DEBUG_LOG_DIR}" ]]; then

		USE_DEBUG_LOG=true

		exec {DEBUG_FD}>>"$DEBUG_LOG"
		date >&${DEBUG_FD}
		echo "=== parameters: $*" >&${DEBUG_FD}
		env | grep OCF_ | sort >&${DEBUG_FD}
	else 
		exec {DEBUG_FD}>/dev/null
	fi
else
	exec {DEBUG_FD}>/dev/null
fi




meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="drbd9" version="1.0">
<version>1.0</version>

<longdesc lang="en">
This is an example resource agent that impliments two states
</longdesc>
<shortdesc lang="en">Example stateful resource agent</shortdesc>

<parameters>

<parameter name="drbd_debug_level" unique="1">
<longdesc lang="en">
Debug level:
- 0 no debug
- 1 debug stderr to debug file
- 2 set +x
</longdesc>
<shortdesc lang="en">Debug Level</shortdesc>
<content type="string"/>
</parameter>

<parameter name="drbd_resource" unique="1" required="1">
<longdesc lang="en">
The name of the drbd resource from the drbd.conf file.
</longdesc>
<shortdesc lang="en">drbd resource name</shortdesc>
<content type="string"/>
</parameter>

<parameter name="adjust_master_score">
<longdesc lang="en">
Space separated list of four master score adjustments for different scenarios:
 - only access to 'consistent' data
 - only remote access to 'uptodate' data
 - currently Secondary, local access to 'uptodate' data, but remote is unknown
 - local access to 'uptodate' data, and currently Primary or remote is known

Numeric values are expected to be non-decreasing.

Default are the previously hardcoded values.

Set the first value to 0 (and configure proper fencing methods)
to prevent pacemaker from trying to promote while it is unclear
whether the data is really the most recent copy.
(DRBD knows it is "consistent", but is unsure about "uptodate"ness).

Advanced use: Adjust the other values to better fit into complex
dependency score calculations.
</longdesc>
<shortdesc lang="en">master score adjustments</shortdesc>
<content type="string" default="${OCF_RESKEY_adjust_master_score_default}"/>
</parameter>

<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN}/drbd9-{OCF_RESOURCE_INSTANCE}.state" />
</parameter>

</parameters>

<actions>
<action name="start"   timeout="20" />
<action name="stop"    timeout="20" />
<action name="monitor" depth="0"  timeout="20" interval="10" role="Master"/>
<action name="monitor" depth="0"  timeout="20" interval="10" role="Slave"/>
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="30" />
</actions>
</resource-agent>
END
	exit $OCF_SUCCESS
}

#######################################################################
# Helpers 

# "macro" to be able to give useful error messages
# on clone resource configuration error.
meta_expect()
{
	local what=$1 whatvar=OCF_RESKEY_CRM_meta_${1//-/_} op=$2 expect=$3
	local val=${!whatvar}
	if [[ -n $val ]]; then
		# [, not [[, or it won't work ;)
		[ $val $op $expect ] && return
	fi
	ocf_log err "meta parameter misconfigured, expected $what $op $expect, but found ${val:-unset}."
	exit $OCF_ERR_CONFIGURED
}

do_cmd() {
	# Run a command, return its exit code, capture any output, and log
	# everything if appropriate.
	local cmd="$*" cmd_out ret
	ocf_log debug "$DRBD_RESOURCE: Calling $cmd"
	cmd_out=$( "$@" )
	ret=$?

	if [ $ret != 0 ]; then
		ocf_log err "$DRBD_RESOURCE: Called $cmd"
		ocf_log err "$DRBD_RESOURCE: Exit code $ret"
		ocf_log err "$DRBD_RESOURCE: Command output: $cmd_out"
	else
		ocf_log debug "$DRBD_RESOURCE: Exit code $ret"
		ocf_log debug "$DRBD_RESOURCE: Command output: $cmd_out"
	fi

	return $ret
}

do_drbdadm() {
	local ret
	# Run drbdadm with appropriate command line options, and capture
	# its output.
	# $DRBDADM is defined during drbd_validate as "drbdadm" plus
	# appropriate command line options
	do_cmd $DRBDADM "$@"
	ret=$?

	# having the version mismatch warning once per RA invokation
	# should be enough.
	export DRBD_DONT_WARN_ON_VERSION_MISMATCH=

	return $ret
}

call_unfence()
{
	# It is easier to just call the crm-unfence-peer script, without
	# duplicating part of its code here.  Also adding cibadmin calls to
	# first check if such constraint does even exist would needlessly add
	# even more load on the cib.
	ocf_log debug "DRBDADM_VERSION_CODE=${DRBDADM_VERSION_CODE}"
	export OCF_RESKEY_unfence_extra_args
	: ${OCF_RESKEY_unfence_extra_args:=$OCF_RESKEY_unfence_extra_args_default}

	# The unfence-peer handler was introduced only in 8.9.5.
	if (( DRBDADM_VERSION_CODE >= 0x080905 )) ; then
		do_drbdadm unfence-peer $DRBD_RESOURCE
	else
		/usr/lib/drbd/crm-unfence-peer.sh -r $DRBD_RESOURCE
	fi
	: "unfence exit code: $?"
}

is_drbd_enabled() {
	test -f /proc/drbd
}

figure_out_drbd_peer_uname()
{
        # depending on whether or not the peer is currently
        # configured, slave, master, or about to be started,
        # it may be mentioned in various variables (or not at all)
        local x
        # intentionally not cared for stop_uname
        x=$(printf "%s\n" \
                $OCF_RESKEY_CRM_meta_notify_start_uname \
                $OCF_RESKEY_CRM_meta_notify_promote_uname \
                $OCF_RESKEY_CRM_meta_notify_master_uname \
                $OCF_RESKEY_CRM_meta_notify_slave_uname \
                $OCF_RESKEY_CRM_meta_notify_demote_uname |
                grep -vix -m1 -e "$HOSTNAME" )
	ocf_log debug "TEST: ${x}"
        DRBD_TO_PEER=${x:+ --peer $x}
	ocf_log debug "DRBD_TO_PEER: ${DRBD_TO_PEER}"
}

drbd_update_master_score() {
        set -- $OCF_RESKEY_adjust_master_score
        local only_consistent=$1 only_remote=$2 local_ok=$3 as_good_as_it_gets=$4
        # NOTE
        # there may be constraint scores from rules on role=Master,
        # that in some ways can add to the node attribute based master score we
        # specify below. If you think you want to add personal preferences,
        # in case the scores given by this RA do not suffice, this is the
        # value space you can work with:
        # -INFINITY: Do not promote. Really. Won't work anyways.
                # Too bad, at least with current (Oktober 2009) Pacemaker,
                # negative master scores cause instance stop; restart cycle :(
        # missing, zero: Do not promote.
        #        I think my data is not good enough.
        #        Though, of course, you may try, and it might even work.
        #     5: please, do not promote, unless this is your only option.
        #    10: promotion is probably a bad idea, our local data is no good,
        #        you'd probably run into severe performance problems, and risk
        #        application crashes or blocking IO in case you lose the
        #        replication connection.
        #  1000: Ok to be promoted, we have good data locally (though we don't
        #        know about the peer, so possibly it has even better data?).
        #        You sould use the crm-fence-peer.sh handler or similar
        #        mechanism to avoid data divergence.
        # 10000: Please promote me/keep me Primary.
        #        I'm confident that my data is as good as it gets.
        #
        # For multi volume, we need to compare who is "better" a bit more sophisticated.
        # The ${XXX[*]//UpToDate}, without being in double quotes, results in a single space,
        # if all are UpToDate.
        : == DEBUG == ${DRBD_ROLE_LOCAL[*]}/${DRBD_DSTATE_LOCAL[*]//UpToDate/ }/${DRBD_DSTATE_REMOTE[*]//UpToDate/ }/ ==
        case ${DRBD_ROLE_LOCAL[*]}/${DRBD_DSTATE_LOCAL[*]//UpToDate/ }/${DRBD_DSTATE_REMOTE[*]//UpToDate/ }/ in
        *Primary*/\ /\ /)
                # I am Primary, all local disks are UpToDate,
                # AND all peer disks are UpToDate
                set_master_score $as_good_as_it_gets
                : == DEBUG == unfence_if_all_uptodate=$unfence_if_all_uptodate
                $unfence_if_all_uptodate && call_unfence
                ;;
        *Primary*/\ /*/)
                # I am Primary, all local disks are UpToDate,
                # not so sure about the peer's disks
                set_master_score $as_good_as_it_gets
                ;;
        */\ /*DUnknown*/)
                # all local disks are UpToDate,
                # but I'm not Primary,
                # and I'm not sure about the peer's disk state(s).
                # We may need to outdate ourselves?
                # But if we outdate in a MONITOR, and are disconnected
                # secondary because of a hard primary crash, before CRM noticed
                # that there is no more master, we'd make us utterly useless!
                # Trust that the primary will also notice the disconnect,
                # and will place an appropriate fencing constraint via
                # its fence-peer handler callback.
                set_master_score  $local_ok
                ;;
        */\ /*/)
                # We know something about our peer, which means that either the
                # replication link is established, or it was not even
                # consistent last time we talked to each other.
                # Also all our local disks are UpToDate, which means even if we are
                # currently synchronizing, we do so as SyncSource.
                set_master_score $as_good_as_it_gets
                ;;

        */*/\ /)
                # At least one of our local disks is not up to date.
                # But our peer is ALL OK.
                # We can expect to have access to useful
                # data, but must expect degraded performance.
                set_master_score $only_remote
                ;;

        */*Attaching*/*/|\
        */*Negotiating*/*/)
                # some transitional state.
                # just don't do anything
                : ;;

        Unconfigured*|\
        */*Diskless*/*/|\
        */*Failed*/*/|\
        */*Inconsistent*/*/|\
        */*Outdated*/*/)
                # ALWAYS put the cluster in MAINTENANCE MODE
                # if you add a volume to a live replication group,
                # because the new volume will typically come up as Inconsistent
                # the first time, which would cause a monitor to revoke the
                # master score!
                #
                # At least some of our local disks are not really useable.
                # Our peer is not all good either (or some previous case block
                # would have matched).  We have no access to useful data.
                # DRBD would refuse to be promoted, anyways.
                #
                # set_master_score -INFINITY
                # Too bad, at least with current (Oktober 2009) Pacemaker,
                # negative master scores cause instance stop; restart cycle :(
                # Hope that this will suffice.
                remove_master_score
                ;;
        *)
                # All local disks seem to be Consistent.
                # They _may_ be up to date, or not.
                # We hope that fencing mechanisms have put constraints in
                # place, so we won't be promoted with stale data.
                # But in case this was a cluster crash,
                # at least allow _someone_ to be promoted.
                set_master_score $only_consistent
                ;;
        esac

        : "$OCF_SUCCESS = OCF_SUCCESS"
        return $OCF_SUCCESS
}


set_master_score() {
	# Use quiet mode (-Q) to quench logging. Actual score updates
	# will get logged by attrd anyway
	if [[ $1 -le 0 ]]; then
		remove_master_score
	else
		do_cmd ${HA_SBIN_DIR}/crm_master -Q -l reboot -v $1
	fi
}

remove_master_score() {
	do_cmd ${HA_SBIN_DIR}/crm_master -l reboot -D
}


drbd9_status() {
	local rc
	local dev
	rc=$OCF_NOT_RUNNING

	# NOT local! but "return values"
	# since 8.4 supports multi volumes per resource,
	# these are shell arrays.
	#
	# Initialize to "Unconfigured", in case this returns early.
	# They will be re-initialized and properly populated in drbd_set_status_variables.
	DRBD_ROLE_LOCAL=(Unconfigured)
	DRBD_ROLE_REMOTE=(Unknown)
	DRBD_CSTATE=(Unconfigured)
	DRBD_DSTATE_LOCAL=(Unconfigured)
	DRBD_DSTATE_REMOTE=(DUnknown)

	is_drbd_enabled || return $rc

	# Not running, if no block devices exist.
	#
	# FIXME what if some do, and some do not exist?
	# Adding/removing volumes to/from existing resources should only be
	# done with maintenance-mode enabled.
	# If someone does manually kill/remove only some of the volumes,
	# we tolerate that here.

	for dev in ${DRBD_DEVICES[@]} ""; do
		test -b $dev && break
	done

	[[ $dev ]] || return $rc

	# ok, module is loaded, block device nodes exist.
	# lets see the status
	drbd9_set_status_variables
	case "${DRBD_ROLE_LOCAL[*]}" in
	*Primary*)
		rc=$OCF_RUNNING_MASTER
		;;
	*Secondary*)
		if [ -f "${DRBDMANAGE_DIR}/.enable.${DRBD_RESOURCE}" ]; then
			rc=${OCF_SUCCESS}
		else
			rc=${OCF_NOT_RUNNING}
		fi
		;;
	*Unconfigured*)
		rc=$OCF_NOT_RUNNING
		;;
	*)
		ocf_log err "Unexpected role(s) >>${DRBD_ROLE_LOCAL[*]}<<"
		rc=$OCF_ERR_GENERIC
	esac

	return $rc
}

drbd9_set_status_variables() {
	# drbdsetup sh-status prints these values to stdout,
	# and then prints _sh_status_process.
	#
	# if we eval that, we do not need several drbdadm/drbdsetup commands
	# to figure out the various aspects of the state.
	local _minor _res_name _known _cstate _role _peer _disk _pdsk
	local _volume
	local _flags_susp _flags_aftr_isp _flags_peer_isp _flags_user_isp
	local _resynced_percent
	local out

	DRBD_ROLE_LOCAL=()
	DRBD_ROLE_REMOTE=()
	DRBD_CSTATE=()
	DRBD_DSTATE_LOCAL=()
	DRBD_DSTATE_REMOTE=()


	DRBD_INFO=$($DRBDSETUP status $DRBD_RESOURCE --verbose)
	LINE_ID=0
	while : ; do
		read -r tmp_resource tmp_nodeid tmp_role tmp_suspended
		DRBD_ROLE_LOCAL[0]=${tmp_role#role:}
		read -r tmp_volume tmp_minor tmp_dstate tmp_blocked
		DRBD_DSTATE_LOCAL[0]=${tmp_dstate#disk:}
		read -r tmp_remotenode tmp_remotenodeid tmp_remoteconnected tmp_remoterole tmp_remotecongested
                DRBD_CSTATE[0]=${tmp_remoteconnected#connection:}
		DRBD_ROLE_REMOTE[0]=${tmp_remoterole#role:}
		read -r tmp_remotevolume tmp_replication tmp_remotedstate tmp_resync
		DRBD_DSTATE_REMOTE[0]=${tmp_remotedstate#peer-disk:}
		break
	done < <($DRBDSETUP status $DRBD_RESOURCE --verbose)

	# if there was no output at all, or a weird output
	# make sure the status arrays won't be empty.
	[[ ${#DRBD_ROLE_LOCAL[@]}    != 0 ]] || DRBD_ROLE_LOCAL=(Unconfigured)
	[[ ${#DRBD_ROLE_REMOTE[@]}   != 0 ]] || DRBD_ROLE_REMOTE=(Unknown)
	[[ ${#DRBD_CSTATE[@]}        != 0 ]] || DRBD_CSTATE=(Unconfigured)
	[[ ${#DRBD_DSTATE_LOCAL[@]}  != 0 ]] || DRBD_DSTATE_LOCAL=(Unconfigured)
	[[ ${#DRBD_DSTATE_REMOTE[@]} != 0 ]] || DRBD_DSTATE_REMOTE=(DUnknown)

	: == DEBUG == DRBD_ROLE_LOCAL    == ${DRBD_ROLE_LOCAL[@]} ==
	: == DEBUG == DRBD_ROLE_REMOTE   == ${DRBD_ROLE_REMOTE[@]} ==
	: == DEBUG == DRBD_CSTATE        == ${DRBD_CSTATE[@]} ==
	: == DEBUG == DRBD_DSTATE_LOCAL  == ${DRBD_DSTATE_LOCAL[@]} ==
	: == DEBUG == DRBD_DSTATE_REMOTE == ${DRBD_DSTATE_REMOTE[@]} ==
}


##############################
stateful_usage() {
	cat <<END
usage: $0 {start|stop|promote|demote|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
	exit $1
}

stateful_update() {
	echo $1 > ${OCF_RESKEY_state}
}

stateful_check_state() {
    target=$1
    if [ -f ${OCF_RESKEY_state} ]; then
	state=`cat ${OCF_RESKEY_state}`
	if [ "x$target" = "x$state" ]; then
	    return 0
	fi

    else
	if [ "x$target" = "x" ]; then
	    return 0
	fi
    fi

    return 1
}

stateful_start() {
    stateful_check_state master
    if [ $? = 0 ]; then
       	# CRM Error - Should never happen
	return $OCF_RUNNING_MASTER
    fi
    stateful_update slave
    $CRM_MASTER -v ${slave_score}
    return 0
}

drbd9_start() {
	local rc
	local status
	local first_try=true

	rc=$OCF_ERR_GENERIC

	if ! is_drbd_enabled; then
		do_cmd modprobe -s drbd `$DRBDADM sh-mod-parms` || {
			ocf_log err "Cannot load the drbd module.";
			: "$OCF_ERR_INSTALLED = OCF_ERR_INSTALLED"
			return $OCF_ERR_INSTALLED
		}
		ocf_log debug "$DRBD_RESOURCE start: Module loaded."
	fi

	#just start drbdmanaged
	systemctl start drbdmanaged

	

	# Keep trying to bring up the resource;
	# wait for the CRM to time us out if this fails
	while :; do

		drbd9_status
		status=$?

		ocf_log warn "AAA drbd_status == ${status}"

		case "$status" in
		$OCF_SUCCESS)
			ocf_log warn "$DRBD_RESOURCE success".
			# Just in case we have to adjust something, this is a
			# good place to do it.  Actually, we don't expect to be
			# called to "start" an already "running" resource, so
			# this is probably dead code.
			# Also, ignore the exit code of adjust, as we are
			# "running" already, anyways, right?
			#figure_out_drbd_peer_uname
			#do_drbdadm $DRBD_TO_PEER adjust $DRBD_RESOURCE
			rc=$OCF_SUCCESS
			break
			;;
		$OCF_NOT_RUNNING)
			ocf_log warn "$DRBD_RESOURCE not running".
			touch "${DRBDMANAGE_DIR}/.enable.${DRBD_RESOURCE}"
			sleep
			# Check for offline resize. If using internal meta data,
			# we may need to move it first to its expected location.
			#$first_try && do_drbdadm check-resize $DRBD_RESOURCE
			#figure_out_drbd_peer_uname
			#if ! create_device_udev_settle; then
			#	# We cannot even create the objects
			#	exit $OCF_ERR_GENERIC
			#fi
			#if ! do_drbdadm $DRBD_TO_PEER attach $DRBD_RESOURCE ; then
			#	# If we cannot up it, even on the second try,
			#	# it is unlikely to get better.  Don't wait for
			#	# this operation to timeout, but short circuit
			#	# exit with generic error.
			#	ocf_log warn "DUPAAA"
			#	$first_try || exit $OCF_ERR_GENERIC
			#	sleep 1
			#fi
			;;
		$OCF_RUNNING_MASTER)
			ocf_log warn "$DRBD_RESOURCE already Primary, demoting."
			do_drbdadm secondary $DRBD_RESOURCE
		esac
		$first_try || sleep 1
		first_try=false
	done

	# in case someone does not configure monitor,
	# we must at least call it once after start.
	drbd_update_master_score

	return $rc
}


drbd9_demote() {
	local rc
	local status
	local first_try=true

	rc=$OCF_ERR_GENERIC

	# Keep trying to demote the resource;
	# wait for the CRM to time us out if this fails
	while :; do
		drbd9_status
		status=$?
		case "$status" in
		$OCF_SUCCESS)
			rc=$OCF_SUCCESS
			break
			;;
		$OCF_NOT_RUNNING)
			ocf_log error "Trying to promote a resource that was not started"
			break
			;;
		$OCF_RUNNING_MASTER)
			do_drbdadm secondary $DRBD_RESOURCE
		esac
		$first_try || sleep 1
		first_try=false
	done
	drbd_update_master_score

	return $rc
}


stateful_demote() {
    stateful_check_state 
    if [ $? = 0 ]; then
       	# CRM Error - Should never happen
	return $OCF_NOT_RUNNING
    fi
    stateful_update slave
    $CRM_MASTER -v ${slave_score}
    return 0
}


drbd9_promote() {
	local rc
	local status
	local first_try=true

	rc=$OCF_ERR_GENERIC

	# Keep trying to promote the resource;
	# wait for the CRM to time us out if this fails
	while :; do
		drbd9_status
		status=$?
		ocf_log warn "drbd9_status $?"

		case "$status" in
		$OCF_SUCCESS)
			do_drbdadm primary $DRBD_RESOURCE
			if [[ $? = 17 ]]; then
				# All available disks are inconsistent,
				# or I am consistent, but failed to fence the peer.
				# Cannot become primary.
				# No need to retry indefinitely.
				ocf_log crit "Refusing to be promoted to Primary without UpToDate data"
				break
			fi
			;;
		$OCF_NOT_RUNNING)
			ocf_log error "Trying to promote a resource that was not started"
			break
			;;
		$OCF_RUNNING_MASTER)
			rc=$OCF_SUCCESS
			break
		esac
		$first_try || sleep 1
		first_try=false
	done

	# avoid too tight pacemaker driven "recovery" loop,
	# if promotion keeps failing for some reason
	if [[ $rc != 0 ]] && (( $SECONDS < 15 )) ; then
		delay=$(( 15 - SECONDS ))
		ocf_log warn "promotion failed; sleep $delay # to prevent tight recovery loop"
		sleep $delay
	fi
	drbd_update_master_score
	return $rc
}

stateful_promote() {
    stateful_check_state 
    if [ $? = 0 ]; then
	return $OCF_NOT_RUNNING
    fi
    stateful_update master
    $CRM_MASTER -v ${master_score}
    return 0
}

drbd9_stop() {
	local rc=$OCF_ERR_GENERIC
	local first_try=true

	# Keep trying to bring down the resource;
	# wait for the CRM to time us out if this fails
	while :; do
		drbd9_status
		status=$?
		case "$status" in
		$OCF_SUCCESS)
			# drbd9 stop action when drbdmanaged is used
			rm "${DRBDMANAGE_DIR}/.enable.${DRBD_RESOURCE}"
			#do_drbdadm down $DRBD_RESOURCE
			#rc=$OCF_SUCCESS
			#break
			;;
		$OCF_NOT_RUNNING)
			# Just in case, down it anyways, in case it has been
			# deconfigured but not yet removed.
			# Relevant for >= 8.4.
			#do_drbdadm down $DRBD_RESOURCE
			# But ignore any return codes,
			# we are not running, so stop is successfull.
			rc=$OCF_SUCCESS
			break
			;;
		$OCF_RUNNING_MASTER)
			ocf_log warn "$DRBD_RESOURCE still Primary, demoting."
			do_drbdadm secondary  $DRBD_RESOURCE
		esac
		$first_try || sleep 1
		first_try=false
	done

	# if there is some Master (Primary) still around,
	# outdate myself in drbd on-disk meta data.
	#maybe_outdate_self

	# do not let old master scores laying around.
	# they may confuse crm if this node was set to standby.
	remove_master_score

	return $rc
}


stateful_stop() {
    $CRM_MASTER -D
    stateful_check_state master
    if [ $? = 0 ]; then
       	# CRM Error - Should never happen
	return $OCF_RUNNING_MASTER
    fi
    if [ -f ${OCF_RESKEY_state} ]; then
	rm ${OCF_RESKEY_state}
    fi
    return 0
}

# I'm sorry, but there is no $OCF_DEGRADED_MASTER or similar yet.
drbd9_monitor() {
	local status
	drbd9_status
	status=$?

	if [[ $status = $OCF_NOT_RUNNING ]] && ocf_is_probe ; then
		# see also linux-ha mailing list archives,
		# From: Andrew Beekhof
		# Subject: Re: pacemaker+drbd promotion delay
		# Date: 2012-04-13 01:47:37 GMT
		# e.g.: http://thread.gmane.org/gmane.linux.highavailability.user/37089/focus=37163
		# ---
		: "do nothing" ;
	else
		drbd_update_master_score
	fi

	case $status in
	(0) : "OCF_SUCCESS" ;;
	(1) : "OCF_ERR_GENERIC" ;;
	(2) : "OCF_ERR_ARGS" ;;
	(3) : "OCF_ERR_UNIMPLEMENTED" ;;
	(4) : "OCF_ERR_PERM" ;;
	(5) : "OCF_ERR_INSTALLED" ;;
	(6) : "OCF_ERR_CONFIGURED" ;;
	(7) : "OCF_NOT_RUNNING" ;;
	(8) : "OCF_RUNNING_MASTER" ;;
	(9) : "OCF_FAILED_MASTER" ;;
	(*) : " WTF? $status " ;;
	esac

	return $status
}

stateful_monitor() {
    stateful_check_state "master"
    if [ $? = 0 ]; then
	if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then
	    # Restore the master setting during probes
	    $CRM_MASTER -v ${master_score}
	fi
	return $OCF_RUNNING_MASTER
    fi

    stateful_check_state "slave"
    if [ $? = 0 ]; then
	if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then
	    # Restore the master setting during probes
	    $CRM_MASTER -v ${slave_score}
	fi
	return $OCF_SUCCESS
    fi

    if [ -f ${OCF_RESKEY_state} ]; then
	echo "File '${OCF_RESKEY_state}' exists but contains unexpected contents"
	cat ${OCF_RESKEY_state}
	return $OCF_ERR_GENERIC
    fi
    return 7
}

drbd9_validate() {
	exit $OCF_SUCCESS
}

: ${slave_score=5}
: ${master_score=10}

: ${OCF_RESKEY_CRM_meta_interval=0}
: ${OCF_RESKEY_CRM_meta_globally_unique:="true"}

if [ "x$OCF_RESKEY_state" = "x" ]; then
    if [ ${OCF_RESKEY_CRM_meta_globally_unique} = "false" ]; then
	state="${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state"
	
	# Strip off the trailing clone marker
	OCF_RESKEY_state=`echo $state | sed s/:[0-9][0-9]*\.state/.state/`
    else 
	OCF_RESKEY_state="${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state"
    fi
fi


drbd9_notify () {
	return ${OCF_SUCCESS}
}

drbd9_validate_all () {
	DRBDADM="drbdadm"
	DRBDSETUP="drbdsetup"
	DRBDMANAGE="drbdmanage"
        USE_SYSTEMD=false
	DRBD_HAS_MULTI_VOLUME=false


	# these will _exit_ if they don't find the binaries
	check_binary $DRBDADM
	check_binary $DRBDSETUP
	# XXX I really take cibadmin, sed, grep, etc. for granted.


	# we just will ignore it unleas we are a clone
	if [[ ! -n "${OCF_RESKEY_CRM_meta_clone}" || "${OCF_RESKEY_CRM_meta_clone}" -gt 0 ]]; then
		return $OCF_SUCCESS
	fi 
	#[root@sdlx032 gsi]# drbdadm --version
	#DRBDADM_BUILDTAG=GIT-hash:\ c6e62702d5e4fb2cf6b3fa27e67cb0d4b399a30b\ build\ by\ root@sdlx033\,\ 2016-07-01\ 09:12:39
	#DRBDADM_API_VERSION=2
	#DRBD_KERNEL_VERSION_CODE=0x090001
	#DRBDADM_VERSION_CODE=0x080906
	#DRBDADM_VERSION=8.9.6

	

	local VERSION 
	DRBD_KERNEL_VERSION_CODE=0
	DRBDADM_VERSION_CODE=0
	while read -r tmp_line ; do
		case "${tmp_line}" in
			DRBDADM_VERSION_CODE=* ) DRBDADM_VERSION_CODE=${tmp_line#DRBDADM_VERSION_CODE=} ;;
		esac


	done < <($DRBDADM --version 2>/dev/null)

	if (( $DRBD_KERNEL_VERSION_CODE == 0x0 )) ; then
		# Maybe the DRBD module was not loaded (yet).
		# I don't want to load the module here,
		# maybe this is just a probe or stop.
		# It will be loaded on "start", though.
		# Instead, look at modinfo output.
		# Newer drbdadm does this implicitly, but may reexec older
		# drbdadm versions for compatibility reasons.
		DRBD_KERNEL_VERSION_CODE=$(printf "0x%02x%02x%02x" $(
			modinfo -F version drbd |
			sed -ne 's/^\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\1 \2 \3/p'))
	fi

	if (( $DRBD_KERNEL_VERSION_CODE <= 0x090000 )) ; then
		ocf_log err "This resource agent does only support DRBD version 9.x"
		exit $OCF_ERR_INSTALLED
	fi





	# Check clone and M/S options.
	# drbd9 support more than 2 clones but only one master
	#meta_expect clone-max -le 2
	if (( $DRBD_KERNEL_VERSION_CODE < 0x090100 )) ; then
		meta_expect master-max -eq 1
	fi

	meta_expect clone-node-max = 1
	meta_expect master-node-max = 1


	# Rather than returning $OCF_ERR_CONFIGURED, we sometimes return
	# $OCF_ERR_INSTALLED here: the local config may be broken, but some
	# other node may have a valid config.

	# check drbdconf plausibility
	case "$OCF_RESKEY_drbdconf" in
	"")
		# this is actually ok. drbdadm has its own builtin defaults.
		# but as long as we assign an explicit default above,
		# this cannot happen anyways.
		: ;;
	*[!-%+./0-9:=@A-Z_a-z]*)
		# no, I do not trust the configurable cib parameters.
		ocf_log err "drbdconf name must only contain [-%+./0-9:=@A-Z_a-z]"
		: "$OCF_ERR_CONFIGURED = OCF_ERR_CONFIGURED"
		return $OCF_ERR_CONFIGURED
		;;
	*)
		# Check if we can read the configuration file.
		if [ ! -r "${OCF_RESKEY_drbdconf}" ]; then
			ocf_log err "Configuration file ${OCF_RESKEY_drbdconf} does not exist or is not readable!"
			: "$OCF_ERR_INSTALLED = OCF_ERR_INSTALLED"
			return $OCF_ERR_INSTALLED
		fi
		DRBDADM="$DRBDADM -c $OCF_RESKEY_drbdconf"
	esac


	# check drbd_resource plausibility
	case "$OCF_RESKEY_drbd_resource" in
	"")
		ocf_log err "No resource name specified!"
		: "$OCF_ERR_CONFIGURED = OCF_ERR_CONFIGURED"
		return $OCF_ERR_CONFIGURED
		;;
	*[!-%+./0-9:=@A-Z_a-z]*)
		# no, I do not trust the configurable cib parameters.
		ocf_log err "Resource name must only contain [-%+./0-9:=@A-Z_a-z]"
		: "$OCF_ERR_CONFIGURED = OCF_ERR_CONFIGURED"
		return $OCF_ERR_CONFIGURED
	esac


	# exporting this is useful for "drbdsetup show".
	# and it makes it all a little bit more readable.
	export DRBD_RESOURCE=$OCF_RESKEY_drbd_resource

	# The resource should appear in the config file,
	# otherwise something's fishy
	# NOTE
	# since 8.4 has multi volume support,
	# DRBD_DEVICES will be a shell array!
	# FIXME we should double check that we explicitly restrict the set of
	# valid characters in device names...
       
	#if DRBD_DEVICES=($($DRBDADM --stacked sh-dev $DRBD_RESOURCE 2>/dev/null)); then
	#	# apparently a "stacked" resource. Remember for future DRBDADM calls.
	#	DRBDADM="$DRBDADM -S"
	if DRBD_DEVICES=($($DRBDADM sh-dev $DRBD_RESOURCE 2>/dev/null)); then
		: # nothing to do.
	else
		if [[ $__OCF_ACTION = "monitor" && $OCF_RESKEY_CRM_meta_interval = 0 ]]; then
			# ok, this was a probe. That may happen on any node,
			# to enforce configuration.
			: "$OCF_NOT_RUNNING = OCF_NOT_RUNNING"
			return $OCF_NOT_RUNNING
		else
			# hm. probably misconfigured constraint somewhere.
			# sorry. don't retry anywhere.
			ocf_log err "DRBD resource ${DRBD_RESOURCE} not found in configuration file ${OCF_RESKEY_drbdconf}."
			remove_master_score
			: "$OCF_ERR_INSTALLED = OCF_ERR_INSTALLED"
			return $OCF_ERR_INSTALLED
		fi
	fi


	# detect whether notify is configured or not.
	# for probes, the meta_notify* namespace is not exported.
	case $__OCF_ACTION in
	monitor|validate-all|stop)
		:;;
	*)
		# Test if the environment variables for either the notify
		# enabled, or one of its effects, are set.
		# If both are unset, we complain.
		if ocf_is_true ${OCF_RESKEY_ignore_missing_notifications:=false} ; then
			: "ignore" ;
		elif ! ocf_is_true ${OCF_RESKEY_CRM_meta_notify} &&
		   [[ ${OCF_RESKEY_CRM_meta_notify_start_uname- NOT SET } = " NOT SET " ]]; then
			ocf_log err "you really should enable notify when using this RA (or set ignore_missing_notifications=true)"
			: "$OCF_ERR_CONFIGURED = OCF_ERR_CONFIGURED"
			return $OCF_ERR_CONFIGURED
		fi
	esac



	local i j n=0 fallback=false
	for i in $OCF_RESKEY_adjust_master_score; do
		[[ $i = *[!0-9]* ]]   && fallback=true && ocf_log err "BAD adjust_master_score value $i ; falling back to default"
		[[ $j && $i -lt $j ]] && fallback=true && ocf_log err "BAD adjust_master_score value $j > $i ; falling back to default"
		j=$i
		n=$(( n+1 ))
	done
	[[ $n != 4 ]] && fallback=true && ocf_log err "Not enough adjust_master_score values ($n != 4); falling back to default"
	$fallback && OCF_RESKEY_adjust_master_score=$OCF_RESKEY_adjust_master_score_default

	# we use it in various places,
	# just make sure it contains what we expect.
	HOSTNAME=`uname -n`

	: "$OCF_SUCCESS = OCF_SUCCESS"
	return $OCF_SUCCESS
}




case $__OCF_ACTION in
meta-data)	meta_data;  exit $? ;;
usage|help)	stateful_usage $OCF_SUCCESS; exit $? ;;
esac


if $USE_DEBUG_LOG ; then
	exec 2>&${DEBUG_FD}
	if [[ ${OCF_RESKEY_drbd_debug_level} -gt 1 ]]; then
		set -x
	fi
fi


DRBDADM="drbdadm"
DRBDSETUP="drbdsetup"
DRBDMANAGE="drbdmanage"
USE_SYSTEMD=false
DRBD_HAS_MULTI_VOLUME=false


# these will _exit_ if they don't find the binaries
check_binary $DRBDADM
check_binary $DRBDSETUP
# XXX I really take cibadmin, sed, grep, etc. for granted.



# check if resource is defined first
DRBD_RESOURCE_EXISTS=0
export DRBD_RESOURCE=$OCF_RESKEY_drbd_resource
if (${DRBDSETUP} status ${DRBD_RESOURCE} >/dev/null) ; then 
	DRBD_RESOURCE_EXISTS=1
	DRBD_DEVICES=($($DRBDADM sh-dev $DRBD_RESOURCE 2>/dev/null));
else
	DRBD_DEVICES=""
fi





# These operations do not require the clone checking + OCFS2
# initialization.
case $__OCF_ACTION in
	status) drbd9_status
		exit $?
		;;
	monitor) drbd9_monitor
		exit $?
		;;
	validate-all) drbd9_validate
		exit $?
		;;
	stop) drbd9_stop
		exit $?
		;;
esac


if [ ! -n "$OCF_RESKEY_CRM_meta_clone" ]; then
	ocf_exit_reason "You have to create cluster first"
        ocf_log err "RUN IT AS A CLONE!"
        exit $OCF_ERR_CONFIGURED
fi

case $__OCF_ACTION in
start)		drbd9_start; exit $? ;;
notify)		drbd9_notify; exit $? ;;
promote)	drbd9_promote; exit $?;;
demote)		drbd9_demote; exit $?;;
*)		stateful_usage $OCF_ERR_UNIMPLEMENTED; exit $?;;
esac

